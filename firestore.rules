/**
 * @fileoverview Firestore Security Rules for Tech Path Weaver.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to career paths and courses. Mentorships are accessible
 * only to the involved mentor and mentee. Authorization independence is maintained
 * by storing the `authId` inside the `UserProfile` document.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, where `userId` matches the
 *   Firebase Authentication UID.
 * - Career paths are stored under `/careerPaths/{careerPathId}` and are publicly readable.
 * - Courses are stored under `/courses/{courseId}` and are publicly readable.
 * - Mentorships are stored under `/mentorships/{mentorshipId}` and are accessible only to
 *   the involved mentor and mentee.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Career paths and courses are publicly readable to encourage exploration.
 * - Mentorship details are private and only accessible to the participants.
 *
 * Denormalization for Authorization: The UserProfile stores the 'authId' to
 * allow server-side access to the user's authentication information without requiring
 * a separate lookup. This is crucial for write operations where checking the
 * authenticated user's ID against the profile's `authId` ensures that only the
 * authenticated user can modify their profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user
     *              can read, create, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) User with auth UID 'user_abc' can create their own profile at /users/user_abc with matching authId.
     * @deny  (create) User with auth UID 'user_xyz' cannot create a profile at /users/user_abc.
     * @allow (get, update, delete) User with auth UID 'user_abc' can read, update, or delete their own profile at /users/user_abc.
     * @deny  (get, update, delete) User with auth UID 'user_xyz' cannot read, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && request.auth.uid == userId && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to career paths, but restricts creation,
     *              updates, and deletion.
     * @path /careerPaths/{careerPathId}
     * @allow (get, list) Any user (authenticated or not) can read career path information.
     * @deny  (create, update, delete) No user can create, update, or delete career path information.
     * @principle Allows public read access while restricting write access.
     */
    match /careerPaths/{careerPathId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to courses, but restricts creation,
     *              updates, and deletion.
     * @path /courses/{courseId}
     * @allow (get, list) Any user (authenticated or not) can read course information.
     * @deny  (create, update, delete) No user can create, update, or delete course information.
     * @principle Allows public read access while restricting write access.
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for mentorship documents, allowing only the mentor or mentee to read, update or delete.
     * @path /mentorships/{mentorshipId}
     * @allow (get) User with auth UID 'mentor_abc' can read the mentorship if they are the mentor.
     * @allow (get) User with auth UID 'mentee_xyz' can read the mentorship if they are the mentee.
     * @deny (get) User with auth UID 'outsider' cannot read the mentorship if they are not a participant.
     * @allow (create) User with auth UID 'user_abc' can create the mentorship if the request data indicates that it is valid.
     * @allow (update, delete) User with auth UID 'mentor_abc' or 'mentee_xyz' can update or delete the mentorship.
     * @principle Restricts access to mentorship details to the involved participants.
     */
    match /mentorships/{mentorshipId} {
      allow get: if isMentorOrMentee(resource.data.mentorId, resource.data.menteeId);
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.mentorId == request.auth.uid || request.resource.data.menteeId == request.auth.uid);
      allow update: if isMentorOrMentee(resource.data.mentorId, resource.data.menteeId) && resource != null;
      allow delete: if isMentorOrMentee(resource.data.mentorId, resource.data.menteeId) && resource != null;
    }

    // --- Helper Functions ---

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the document based on the userId.
     * @param {string} userId - The user ID from the document path.
     * @return {bool} True if the user is the owner, false otherwise.
     * @example isOwner('user123') returns true if request.auth.uid == 'user123'.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

        /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID from the document path.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is either the mentor or the mentee.
     * @param {string} mentorId - The mentor's user ID.
     * @param {string} menteeId - The mentee's user ID.
     * @return {bool} True if the user is either the mentor or the mentee, false otherwise.
     */
    function isMentorOrMentee(mentorId, menteeId) {
      return isSignedIn() && (request.auth.uid == mentorId || request.auth.uid == menteeId);
    }
  }
}