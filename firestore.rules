/**
 * @fileOverview Firestore Security Rules for Tech Path Weaver Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allowing users to only access and modify their own profile data.
 * Career paths, courses, and mentorships are publicly readable but
 * only modifiable by authorized users (currently no authorization implemented).
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, where {userId} is the
 *   Firebase Authentication UID.
 * - /careerPaths/{careerPathId}: Stores information about career paths.
 * - /courses/{courseId}: Stores information about courses.
 * - /mentorships/{mentorshipId}: Stores information about mentorship connections.
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the owning user.
 * - Career paths and courses are publicly readable.
 * - User listing is disabled to prevent enumeration of user accounts.
 * - Write access to careerPaths, courses, and mentorships is currently open
 *   but must be secured in future iterations.
 *
 * Denormalization for Authorization:
 * The `authId` is stored within the UserProfile document to eliminate the need
 * for security rules to fetch authentication information during write operations.
 *
 * Structural Segregation:
 * User profile data is segregated under the `/users/{userId}` collection,
 * ensuring that only the authenticated user can access their own profile data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles, allowing only the owning user access.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc' and request.resource.data.id == 'user_abc'.
     * @allow (get, update, delete) User with UID 'user_abc' can access their profile if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (get, update, delete) User with UID 'user_xyz' cannot access user 'user_abc' profile.
     * @principle Enforces document ownership for reads and writes. Validates the user ID on create.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id; //Immutable id
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Career paths are publicly readable, writes are not secured in this prototype.
     * @path /careerPaths/{careerPathId}
     * @allow (get, list) Any user can read career path information.
     * @deny (create, update, delete) No one can currently write to career paths.
     * @principle Public read, owner-only writes (currently writes are disallowed).
     */
    match /careerPaths/{careerPathId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization for career path creation/modification
    }

    /**
     * @description Courses are publicly readable, writes are not secured in this prototype.
     * @path /courses/{courseId}
     * @allow (get, list) Any user can read course information.
     * @deny (create, update, delete) No one can currently write to courses.
     * @principle Public read, owner-only writes (currently writes are disallowed).
     */
    match /courses/{courseId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization for course creation/modification
    }

    /**
     * @description Mentorships are publicly readable, writes are not secured in this prototype.
     * @path /mentorships/{mentorshipId}
     * @allow (get, list) Any user can read mentorship information.
     * @deny (create, update, delete) No one can currently write to mentorships.
     * @principle Public read, owner-only writes (currently writes are disallowed).
     */
    match /mentorships/{mentorshipId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization for mentorship creation/modification
    }
  }
}