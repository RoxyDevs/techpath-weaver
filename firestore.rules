/**
 * @description This ruleset enforces a user-ownership model for user profiles, restricting access to a user's own profile data.
 *  It provides public read access to the mentors and career_paths collections.
 * @dataStructure
 *  - /users/{userId}: Stores individual user profiles, with the document ID matching the Firebase Auth UID.
 *  - /mentors/{mentorId}: Stores a subset of user profiles designated as mentors, publicly readable.
 *  - /career_paths/{careerPathId}: Stores data on suggested career paths, publicly readable.
 *  - /sessions/{sessionId}: Stores user interaction history, restricted to the user.
 *  - /mentorships/{mentorshipId}: Stores mentorship connection information.
 * @keySecurityDecisions
 *  - Users can only read and write their own profile data in the /users collection.
 *  - The /mentors and /career_paths collections are publicly readable but only writeable by authorized users (not implemented in this prototype).
 *  - Listing of users is not permitted.
 *  - The role field is not validated, allowing for flexible role management during prototyping.
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can create a profile at /users/7C9umW6WQmPmGEXuJx7PGjMhJe53
     * @allow (get) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can read their profile at /users/7C9umW6WQmPmGEXuJx7PGjMhJe53
     * @allow (update) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can update their profile at /users/7C9umW6WQmPmGEXuJx7PGjMhJe53
     * @allow (delete) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can delete their profile at /users/7C9umW6WQmPmGEXuJx7PGjMhJe53
     * @deny (create) User with UID " অন্যID " cannot create a profile at /users/7C9umW6WQmPmGEXuJx7PGjMhJe53
     * @deny (get) User with UID " অন্যID " cannot read profile at /users/7C9umW6WQmPmGEXuJx7PGjMhJe53
     * @deny (update) User with UID " অন্যID " cannot update profile at /users/7C9umW6WQmPmGEXuJx7PGjMhJe53
     * @deny (delete) User with UID " অন্যID " cannot delete profile at /users/7C9umW6WQmPmGEXuJx7PGjMhJe53
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to mentor profiles. Write access is restricted.
     * @path /databases/{database}/documents/mentors/{mentorId}
     * @allow (get) Any user can read a mentor profile.
     * @allow (list) Any user can list mentor profiles.
     * @deny (create) No one can create mentor profiles without authorization (TODO).
     * @deny (update) No one can update mentor profiles without authorization (TODO).
     * @deny (delete) No one can delete mentor profiles without authorization (TODO).
     * @principle Provides public read access while restricting writes.
     */
    match /mentors/{mentorId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorized user validation for mentor profile management.
    }

     /**
     * @description Allows public read access to career paths. Write access is restricted.
     * @path /databases/{database}/documents/career_paths/{careerPathId}
     * @allow (get) Any user can read a career path.
     * @allow (list) Any user can list career paths.
     * @deny (create) No one can create career paths without authorization (TODO).
     * @deny (update) No one can update career paths without authorization (TODO).
     * @deny (delete) No one can delete career paths without authorization (TODO).
     * @principle Provides public read access while restricting writes.
     */
    match /career_paths/{careerPathId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorized user validation for career path management.
    }

    /**
     * @description Allows users to read and write their own session data.
     * @path /databases/{database}/documents/sessions/{sessionId}
     * @allow (create) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can create a session at /sessions/{sessionId}
     * @allow (get) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can read their session at /sessions/{sessionId}
     * @allow (update) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can update their session at /sessions/{sessionId}
     * @allow (delete) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can delete their session at /sessions/{sessionId}
     * @deny (create) User with UID " অন্যID " cannot create a session at /sessions/{sessionId}
     * @deny (get) User with UID " অন্যID " cannot read session at /sessions/{sessionId}
     * @deny (update) User with UID " অন্যID " cannot update session at /sessions/{sessionId}
     * @deny (delete) User with UID " অন্যID " cannot delete session at /sessions/{sessionId}
     * @principle Enforces document ownership for writes.
     */
    match /sessions/{sessionId} {
      allow get: if isSignedIn() && isSessionOwner(sessionId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isSessionOwner(sessionId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isSessionOwner(sessionId);
    }
    
    /**
     * @description Allows users to read and write mentorship data.
     * @path /databases/{database}/documents/mentorships/{mentorshipId}
     * @allow (create) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can create a mentorship at /mentorships/{mentorshipId}
     * @allow (get) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can read their mentorship at /mentorships/{mentorshipId}
     * @allow (update) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can update their mentorship at /mentorships/{mentorshipId}
     * @allow (delete) User with UID "7C9umW6WQmPmGEXuJx7PGjMhJe53" can delete their mentorship at /mentorships/{mentorshipId}
     * @deny (create) User with UID " অন্যID " cannot create a mentorship at /mentorships/{mentorshipId}
     * @deny (get) User with UID " অন্যID " cannot read mentorship at /mentorships/{mentorshipId}
     * @deny (update) User with UID " অন্যID " cannot update mentorship at /mentorships/{mentorshipId}
     * @deny (delete) User with UID " অন্যID " cannot delete mentorship at /mentorships/{mentorshipId}
     * @principle Enforces document ownership for writes.
     */
    match /mentorships/{mentorshipId} {
      allow get: if isSignedIn() && isMentorshipParticipant(mentorshipId);
      allow list: if false;
      allow create: if isSignedIn() && (request.resource.data.menteeId == request.auth.uid || request.resource.data.mentorId == request.auth.uid);
      allow update: if isSignedIn() && isMentorshipParticipant(mentorshipId) && (request.resource.data.menteeId == resource.data.menteeId) && (request.resource.data.mentorId == resource.data.mentorId);
      allow delete: if isSignedIn() && isMentorshipParticipant(mentorshipId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }

  function isSessionOwner(sessionId) {
    return exists(/databases/$(database)/documents/sessions/$(sessionId)) && get(/databases/$(database)/documents/sessions/$(sessionId)).data.userId == request.auth.uid;
  }
  
  function isExistingSessionOwner(sessionId) {
    return isSignedIn() && isSessionOwner(sessionId) && resource != null;
  }
  
    function isMentorshipParticipant(mentorshipId) {
    return exists(/databases/$(database)/documents/mentorships/$(mentorshipId)) && (get(/databases/$(database)/documents/mentorships/$(mentorshipId)).data.menteeId == request.auth.uid || get(/databases/$(database)/documents/mentorships/$(mentorshipId)).data.mentorId == request.auth.uid);
  }

  function isExistingMentorshipParticipant(mentorshipId) {
      return isSignedIn() && isMentorshipParticipant(mentorshipId) && resource != null;
  }
}